;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; Transmit a mono or stereo I2S audio stream as stereo
; This is 16 bits per sample; can be altered by modifying the "set" params,
; or made programmable by replacing "set x" with "mov x, y" and using Y as a config register.
;
; Autopull must be enabled, with threshold set to 32.
; Since I2S is MSB-first, shift direction should be to left.
; Hence the format of the FIFO word is:
;
; | 31   :   16 | 15   :    0 |
; | sample ws=0 | sample ws=1 |
;
; Data is output at 1 bit per clock. Use clock divider to adjust frequency.
; Fractional divider will probably be needed to get correct bit clock period,
; but for common syslck freqs this should still give a constant word select period.
;
; One output pin is used for the data output.
; Two side-set pins are used. Bit 0 is clock, bit 1 is word select.

; Send 16 bit words to the PIO for mono, 32 bit words for stereo

.program audio_i2s_32_in
.side_set 2

public entry_point:
    // nop               side 0b01
    // set x, 29         side 0b00

.wrap_target
                    ;        /--- LRCLK
                    ;        |/-- BCLK
bitloop1:           ;        ||
    in pins, 1        side 0b01
    jmp x-- bitloop1  side 0b00
    in pins, 1        side 0b01
    set x, 30         side 0b10

bitloop0:
    in pins, 1        side 0b11
    jmp x-- bitloop0  side 0b10
    in pins, 1        side 0b11
    set x, 30         side 0b00
.wrap

% c-sdk {

static inline void audio_i2s_32_in_program_init(PIO pio, uint sm, uint offset, uint data_pin, uint clock_pin_base) {
    pio_sm_config sm_config = audio_i2s_32_in_program_get_default_config(offset);
    
    sm_config_set_in_pins(&sm_config, data_pin);
    sm_config_set_sideset_pins(&sm_config, clock_pin_base);
    sm_config_set_in_shift(&sm_config, false, true, 32);
    sm_config_set_fifo_join(&sm_config, PIO_FIFO_JOIN_RX);

    pio_gpio_init(pio, data_pin);
    pio_gpio_init(pio, clock_pin_base);
    pio_gpio_init(pio, clock_pin_base+1);
    pio_sm_init(pio, sm, offset, &sm_config);

    uint pin_mask = (1u << data_pin) | (3u << clock_pin_base);
    uint pin_out = (3u << clock_pin_base);
    pio_sm_set_pindirs_with_mask(pio, sm, pin_out, pin_mask);
    pio_sm_set_pins(pio, sm, 0); // clear pins

    pio_sm_exec(pio, sm, pio_encode_jmp(offset + audio_i2s_32_in_offset_entry_point));
    pio_sm_exec(pio, sm, pio_encode_nop() | pio_encode_sideset(2, 1));
    pio_sm_exec(pio, sm, pio_encode_set(pio_x, 29) | pio_encode_sideset(2, 0));
}

%}
